/**
 * Spoticons
 *
 * Variable Set: Spoticons
 *
 * Styleguide 1.2.1
 */
/**
 * Common color usages
 *
 * These colors are provided because they might be needed in many places where
 * they should be synced up.
 */
/**
 * Vertical Grid System
 * --------------------
 *
 * We try to adhere to a baseline grid, which is a vertical grid with lines
 * every X pixels. The baseline of text should always fall on this line.
 */
/**
 * Horizontal Grid System
 * ----------------------
 *
 * This grid system is responsive in four sizes, where all sizes use a 12 column
 * grid.
 *
 * Since the values are calculated, you need to compile the Less code to see the
 * values. From glue, run `node tools/output-grid-values.js` to see
 * the values.
 *
 * Here's a reference for what to use the variables for:
 *
 * Min Width (including scroll bar)
 * --------------------------------
 * Including scroll bar:  $glue-screen-min
 * Excluding scroll bar:  $glue-body-width-min
 *
 * Max Width (of content, space on the sides)
 * ------------------------------------------
 * Including scroll bar:  $glue-screen-max
 * Excluding scroll bar:  $glue-body-width-max
 *
 * Page Gutter (gutter on the sides of the page)
 * ---------------------------------------------
 * Size:                  $glue-grid-page-gutter
 *
 * Extra Small (xs)
 * ----------------
 * Gutter size:           $glue-grid-column-gutter-xs
 * View width range:      $glue-screen-min to $glue-screen-xs-max
 *
 * Small (sm)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-sm
 * View width range:      $glue-screen-sm-min to $glue-screen-sm-max
 *
 * Medium (md)
 * -----------
 * Gutter size:           $glue-grid-column-gutter-md
 * View width range:      $glue-screen-md-min to $glue-screen-md-max
 *
 * Large (lg)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-lg
 * View width range:      $glue-screen-lg-min to $glue-screen-lg-max
 */
/*******************************************************************************
 * Component: GlueDropdown
 *
 * Example:
 *
 * <select class="GlueDropdown">
 *   <option value="option-1">Option 1</option>
 *   <option value="option-2">Option 2</option>
 * </select>
 ******************************************************************************/
/**
 * Spoticons
 *
 * Variable Set: Spoticons
 *
 * Styleguide 1.2.1
 */
/**
 * Common color usages
 *
 * These colors are provided because they might be needed in many places where
 * they should be synced up.
 */
/**
 * Vertical Grid System
 * --------------------
 *
 * We try to adhere to a baseline grid, which is a vertical grid with lines
 * every X pixels. The baseline of text should always fall on this line.
 */
/**
 * Horizontal Grid System
 * ----------------------
 *
 * This grid system is responsive in four sizes, where all sizes use a 12 column
 * grid.
 *
 * Since the values are calculated, you need to compile the Less code to see the
 * values. From glue, run `node tools/output-grid-values.js` to see
 * the values.
 *
 * Here's a reference for what to use the variables for:
 *
 * Min Width (including scroll bar)
 * --------------------------------
 * Including scroll bar:  $glue-screen-min
 * Excluding scroll bar:  $glue-body-width-min
 *
 * Max Width (of content, space on the sides)
 * ------------------------------------------
 * Including scroll bar:  $glue-screen-max
 * Excluding scroll bar:  $glue-body-width-max
 *
 * Page Gutter (gutter on the sides of the page)
 * ---------------------------------------------
 * Size:                  $glue-grid-page-gutter
 *
 * Extra Small (xs)
 * ----------------
 * Gutter size:           $glue-grid-column-gutter-xs
 * View width range:      $glue-screen-min to $glue-screen-xs-max
 *
 * Small (sm)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-sm
 * View width range:      $glue-screen-sm-min to $glue-screen-sm-max
 *
 * Medium (md)
 * -----------
 * Gutter size:           $glue-grid-column-gutter-md
 * View width range:      $glue-screen-md-min to $glue-screen-md-max
 *
 * Large (lg)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-lg
 * View width range:      $glue-screen-lg-min to $glue-screen-lg-max
 */
/*******************************************************************************
 * Public block, elements and modifiers
 ******************************************************************************/
.GlueDropdown {
  background: #333333;
  color: #ffffff;
  border: 0;
  height: 24px;
  font-weight: 200;
}

/*******************************************************************************
 * Component: GlueSectionDivider
 *
 * Example:
 *
 * <div class="GlueSectionDivider">
 *   <div class="GlueSectionDivider__container">
 *     <h2 class="GlueSectionDivider__title">
 *       Genres & Moods
 *     </h2>
 *   </div>
 * </div>
 ******************************************************************************/
/**
 * Spoticons
 *
 * Variable Set: Spoticons
 *
 * Styleguide 1.2.1
 */
/**
 * Common color usages
 *
 * These colors are provided because they might be needed in many places where
 * they should be synced up.
 */
/**
 * Vertical Grid System
 * --------------------
 *
 * We try to adhere to a baseline grid, which is a vertical grid with lines
 * every X pixels. The baseline of text should always fall on this line.
 */
/**
 * Horizontal Grid System
 * ----------------------
 *
 * This grid system is responsive in four sizes, where all sizes use a 12 column
 * grid.
 *
 * Since the values are calculated, you need to compile the Less code to see the
 * values. From glue, run `node tools/output-grid-values.js` to see
 * the values.
 *
 * Here's a reference for what to use the variables for:
 *
 * Min Width (including scroll bar)
 * --------------------------------
 * Including scroll bar:  $glue-screen-min
 * Excluding scroll bar:  $glue-body-width-min
 *
 * Max Width (of content, space on the sides)
 * ------------------------------------------
 * Including scroll bar:  $glue-screen-max
 * Excluding scroll bar:  $glue-body-width-max
 *
 * Page Gutter (gutter on the sides of the page)
 * ---------------------------------------------
 * Size:                  $glue-grid-page-gutter
 *
 * Extra Small (xs)
 * ----------------
 * Gutter size:           $glue-grid-column-gutter-xs
 * View width range:      $glue-screen-min to $glue-screen-xs-max
 *
 * Small (sm)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-sm
 * View width range:      $glue-screen-sm-min to $glue-screen-sm-max
 *
 * Medium (md)
 * -----------
 * Gutter size:           $glue-grid-column-gutter-md
 * View width range:      $glue-screen-md-min to $glue-screen-md-max
 *
 * Large (lg)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-lg
 * View width range:      $glue-screen-lg-min to $glue-screen-lg-max
 */
/*******************************************************************************
 * Public block, elements and modifiers
 ******************************************************************************/
/**
 * Public block class.
 */
.GlueSectionDivider {
  padding: 26px 0 16px;
  font-size: 18px;
  line-height: 24px;
  letter-spacing: normal;
  font-weight: 600;
  color: #ffffff;
  text-transform: none;
}

/**
 * Public element class.
 *
 * 1. There can sometime be auxiliary within the section divider, this ensures
 *    that content is always on the opposite side to the title. Like floats but
 *    without the clearing
 */
.GlueSectionDivider__container {
  display: flex;
  justify-content: space-between;
  /* [1] */
  border-bottom: 1px solid #282828;
  padding-bottom: 4px;
}

/**
 * Public element class.
 */
.GlueSectionDivider__title {
  font-size: 18px;
  line-height: 24px;
  letter-spacing: normal;
  font-weight: 600;
  color: #ffffff;
  text-transform: none;
  margin: 0;
}

/*******************************************************************************
 * Component: GlueResponsiveVirtualGrid
 *
 * Example:
 * <div className="GlueResponsiveVirtualGrid">
 * 	 <div class="row standard-grid">
 *     <div class="GlueResponsiveVirtualGrid__sample-cell col-xs-6 col-sm-4 col-md-3 col-lg-2">
 *       <item />
 *     </div>
 *     <div data-ta-id="list-items">
 *       <div aria-label="grid" class="ReactVirtualized__Grid" role="grid">
 *         <div class="ReactVirtualized__Grid__innerScrollContainer">
 *           <div class="col-xs-6 col-sm-4 col-md-3 col-lg-2">
 *             <item />
 *           </div>
 *           <div class="col-xs-6 col-sm-4 col-md-3 col-lg-2">
 *             <item />
 *           </div>
 *           <div class="col-xs-6 col-sm-4 col-md-3 col-lg-2">
 *             <item />
 *           </div>
 *         </div>
 *       </div>
 *     </div>
 *   </div>
 * </div>
 ******************************************************************************/
/* Collection default theme */
/* Grid default theme */
/* Table default theme */
.ReactVirtualized__Table__headerRow {
  font-weight: 700;
  text-transform: uppercase;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -moz-box-orient: horizontal;
  -moz-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.ReactVirtualized__Table__row {
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -moz-box-orient: horizontal;
  -moz-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.ReactVirtualized__Table__headerTruncatedText {
  display: inline-block;
  max-width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.ReactVirtualized__Table__headerColumn,
.ReactVirtualized__Table__rowColumn {
  margin-right: 10px;
  min-width: 0px;
}

.ReactVirtualized__Table__rowColumn {
  text-overflow: ellipsis;
  white-space: nowrap;
}

.ReactVirtualized__Table__headerColumn:first-of-type,
.ReactVirtualized__Table__rowColumn:first-of-type {
  margin-left: 10px;
}

.ReactVirtualized__Table__sortableHeaderColumn {
  cursor: pointer;
}

.ReactVirtualized__Table__sortableHeaderIconContainer {
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.ReactVirtualized__Table__sortableHeaderIcon {
  -webkit-flex: 0 0 24px;
  -moz-box-flex: 0;
  -ms-flex: 0 0 24px;
  flex: 0 0 24px;
  height: 1em;
  width: 1em;
  fill: currentColor;
}

/* List default theme */
/**
 * Spoticons
 *
 * Variable Set: Spoticons
 *
 * Styleguide 1.2.1
 */
/**
 * Common color usages
 *
 * These colors are provided because they might be needed in many places where
 * they should be synced up.
 */
/**
 * Vertical Grid System
 * --------------------
 *
 * We try to adhere to a baseline grid, which is a vertical grid with lines
 * every X pixels. The baseline of text should always fall on this line.
 */
/**
 * Horizontal Grid System
 * ----------------------
 *
 * This grid system is responsive in four sizes, where all sizes use a 12 column
 * grid.
 *
 * Since the values are calculated, you need to compile the Less code to see the
 * values. From glue, run `node tools/output-grid-values.js` to see
 * the values.
 *
 * Here's a reference for what to use the variables for:
 *
 * Min Width (including scroll bar)
 * --------------------------------
 * Including scroll bar:  $glue-screen-min
 * Excluding scroll bar:  $glue-body-width-min
 *
 * Max Width (of content, space on the sides)
 * ------------------------------------------
 * Including scroll bar:  $glue-screen-max
 * Excluding scroll bar:  $glue-body-width-max
 *
 * Page Gutter (gutter on the sides of the page)
 * ---------------------------------------------
 * Size:                  $glue-grid-page-gutter
 *
 * Extra Small (xs)
 * ----------------
 * Gutter size:           $glue-grid-column-gutter-xs
 * View width range:      $glue-screen-min to $glue-screen-xs-max
 *
 * Small (sm)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-sm
 * View width range:      $glue-screen-sm-min to $glue-screen-sm-max
 *
 * Medium (md)
 * -----------
 * Gutter size:           $glue-grid-column-gutter-md
 * View width range:      $glue-screen-md-min to $glue-screen-md-max
 *
 * Large (lg)
 * ----------
 * Gutter size:           $glue-grid-column-gutter-lg
 * View width range:      $glue-screen-lg-min to $glue-screen-lg-max
 */
/*******************************************************************************
 * Public block, elements and modifiers
 ******************************************************************************/
/**
 * Public sample cell class.
 */
.GlueResponsiveVirtualGrid__sample-cell {
  visibility: hidden;
  pointer-events: none;
  margin-top: -100%;
}

.App__header {
  z-index: 2;
  position: relative;
}

.App__content {
  z-index: 1;
  position: relative;
}

.tl-attention-highlight {
  z-index: 2;
}

.App__description {
  margin-top: 16px;
}

.App__description--video {
  text-align: center;
}

.App__description-title {
  font-size: 11px;
  line-height: 16px;
  letter-spacing: 0.015em;
  font-weight: 200;
  color: #b3b3b3;
  text-transform: uppercase;
  letter-spacing: 0.16em;
  color: #ffffff;
  margin-bottom: 8px;
}

/**
 * 1. Allows the content to be centred
 * 2. Limit the width of the content to reduce line length at wider breakpoints
 */
.App__description-text {
  display: inline-block;
  /* [1] */
}

@media (min-width: 1280px) {
  .App__description-text {
    width: 75%;
    /* [2] */
  }
}

.EpisodesList__empty-message {
  margin-top: 16px;
  text-align: center;
}

.EpisodesList__dropdown-label {
  margin-right: 8px;
}
